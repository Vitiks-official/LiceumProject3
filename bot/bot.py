import os
import asyncio
import logging
import sqlite3
import requests
import matplotlib.pyplot as plt

from datetime import datetime
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import ReplyKeyboardRemove, ReplyKeyboardMarkup, KeyboardButton, FSInputFile
from aiogram.utils.media_group import MediaGroupBuilder

from werkzeug.security import check_password_hash


TOKEN = "7755232438:AAHCm49ljNW8XEFw_JiMJugnV3TPZ-zQTcU"
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.DEBUG)
dp = Dispatcher()


# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async def main():
    bot = Bot(token=TOKEN)
    await dp.start_polling(bot)

# –ö–ª–∞—Å—Å –¥–ª—è —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
class User(StatesGroup):
    user_email = State()
    user_password = State()
    logged = State()
    profile = State()
    edit_profile = State()
    edit_goal = State()
    edit_height = State()
    edit_weight = State()
    edit_age = State()
    edit_lifestyle = State()
    statistics = State()
    add_meal = State()
    article = State()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã —Å—Ç–∞—Ä—Ç
@dp.message(Command("start"))
async def start_command(message: types.Message, state: FSMContext):
    data = await state.get_data()

    if not data.get("user_password"):

        await state.set_state(User.user_email)
        await message.reply("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Vital Stats!üëã\n"
                            "–í–æ–π–¥–∏—Ç–µ –≤ —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç, –µ—Å–ª–∏ –∂–µ –µ–≥–æ –Ω–µ—Ç, "
                            "—Ç–æ –∑–∞—Ä–µ–≥–∏—Å—Ç–∏—Ä—É–π—Ç–µ—Å—å –Ω–∞ —Å–∞–π—Ç–µ Vital Stats. –í–≤–µ–¥–∏—Ç–µ –ø–æ—á—Ç—É:",
                            reply_markup=ReplyKeyboardRemove())
    else:
        await message.reply("–í—ã —É–∂–µ –≤–æ—à–ª–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç!")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Ç–∞—Ç—É—Å–∞ user_email
@dp.message(User.user_email)
async def input_email(message: types.Message, state: FSMContext):
    data = requests.get("http://127.0.0.1:5000/api/user")
    data = data.json()
    if "@" in message.text:
        if message.text.lower() in [i["email"] for i in data["users"]]:
            await state.update_data(user_email=message.text.lower())
            await state.set_state(User.user_password)
            await message.reply(f"–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –∫ –∞–∫–∫–∞—É–Ω—Ç—É {message.text}\n"
                                f"–ò–ª–∏ –∂–µ –µ—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤–æ–π—Ç–∏ –≤ –¥—Ä—É–≥–æ–π –∞–∫–∫–∞—É–Ω—Ç –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É `/back`")
        else:
            await message.reply(f"–∞–∫–∫–∞—É–Ω—Ç–∞ {message.text} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç‚ùóÔ∏è\n"
                                f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è –ø–æ—á—Ç—ã –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑‚ùóÔ∏è")
    else:
        await message.reply("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞ –ø–æ—á—Ç—ã‚ùó")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã back
@dp.message(Command("back"))
async def command_back(message: types.Message, state: FSMContext):
    data = await state.get_data()
    if not data.get("user_password"):
        await state.set_state(User.user_email)
        await message.reply("–í–æ–π–¥–∏—Ç–µ –≤ —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç, –µ—Å–ª–∏ –∂–µ –µ–≥–æ –Ω–µ—Ç,\n"
                            "—Ç–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –Ω–∞ —Å–∞–π—Ç–µ Vital Stats. –í–≤–µ–¥–∏—Ç–µ –ø–æ—á—Ç—É:")
    else:
        await message.reply("–í—ã —É–∂–µ –≤–æ—à–ª–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç!")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Ç–∞—Ç—É—Å–∞ user_password
@dp.message(User.user_password)
async def input_password(message: types.Message, state: FSMContext):
    data = await state.get_data()
    email = data.get("user_email")

    con = sqlite3.connect("../db/calorie_tracker.db")
    cur = con.cursor()
    check_password = cur.execute(f"""SELECT hashed_password FROM user
    WHERE email LIKE '{email}'""").fetchone()[0]
    name = cur.execute(f"""SELECT name FROM user WHERE email LIKE '{email}'""").fetchone()[0]

    if check_password_hash(check_password, message.text):
        await state.update_data(user_password=message.text)
        await state.set_state(User.logged)

        kb = ReplyKeyboardMarkup(keyboard=make_keyboard("menu"), resize_keyboard=True, one_time_keyboard=False)
        await message.reply(f"–£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥ –≤ –∞–∫–∫–∞—É–Ω—Çüéâ\n"
                            f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ {name}üëã", reply_markup=kb)
    else:
        await message.reply(f"–ù–ï–í–ï–†–ù–´–ô –ü–ê–†–û–õ–¨‚ùó\n"
                            f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –º–æ–∂–µ—Ç–µ –≤–æ–π—Ç–∏ –≤ –¥—Ä—É–≥–æ–π –∞–∫–∫–∞—É–Ω—Ç: `/back`")
    con.close()


# –§—É–Ω–∫—Ü–∏—è —Å–æ –≤—Å–µ–º–∏ –ö–µ–π–±–æ—Ä–¥–∞–º–∏
def make_keyboard(mode):
    if mode == "menu":
        return [[KeyboardButton(text="–ü—Ä–æ—Ñ–∏–ª—åüë§")],
                [KeyboardButton(text="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞üìä")],
                [KeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏—ë–º –ø–∏—â–∏üçî")],
                [KeyboardButton(text="–°—Ç–∞—Ç—å–∏üìÉ")],
                [KeyboardButton(text="–í—ã–π—Ç–∏‚õî")]]
    elif mode == "profile":
        return [[KeyboardButton(text="–ù–∞–∑–∞–¥üîô")],
                [KeyboardButton(text="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å‚úçÔ∏è")]]
    elif mode == "edit_profile":
        return [[KeyboardButton(text="–¶–µ–ª—åüéØ")],
                [KeyboardButton(text="–†–æ—Å—Çüìè")],
                [KeyboardButton(text="–í–µ—Å‚öñÔ∏è")],
                [KeyboardButton(text="–í–æ–∑—Ä–∞—Å—Çüî¢")],
                [KeyboardButton(text="–û–±—Ä–∞–∑ –∂–∏–∑–Ω–∏üèÉ‚Äç‚ôÇÔ∏è")],
                [KeyboardButton(text="–ù–∞–∑–∞–¥üîô")]]
    elif mode == "edit_goal":
        return [[KeyboardButton(text="–°–±—Ä–æ—Å–∏—Ç—å –≤–µ—Å")],
                [KeyboardButton(text="–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –≤–µ—Å")],
                [KeyboardButton(text="–ù–∞–±—Ä–∞—Ç—å –≤–µ—Å")],
                [KeyboardButton(text="–ù–∞–∑–∞–¥üîô")]]
    elif mode == "only_back":
        return [[KeyboardButton(text="–ù–∞–∑–∞–¥üîô")]]
    elif mode == "edit_lifestyle":
        return [[KeyboardButton(text="–°–∏–¥—è—á–∏–π –æ–±—Ä–∞–∑ –∂–∏–∑–Ω–∏")],
                [KeyboardButton(text="–ù–∏–∑–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å")],
                [KeyboardButton(text="–£–º–µ—Ä–µ–Ω–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å")],
                [KeyboardButton(text="–í—ã—Å–æ–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å")],
                [KeyboardButton(text="–û—á–µ–Ω—å –≤—ã—Å–æ–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å")],
                [KeyboardButton(text="–ù–∞–∑–∞–¥üîô")]]


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def go_to_profile(state, message, email):
    text = check_profile(email)
    kb = ReplyKeyboardMarkup(keyboard=make_keyboard("profile"), resize_keyboard=True, one_time_keyboard=False)
    await message.reply(text, reply_markup=kb)
    await state.set_state(User.profile)


# –í—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
def check_profile(email):
    data = requests.get("http://127.0.0.1:5000/api/user")
    data = data.json()

    stats = [i for i in data["users"] if i["email"] == email][0]
    con = sqlite3.connect("../db/calorie_tracker.db")
    cur = con.cursor()

    name = stats["name"]
    surname = stats["surname"]
    email = stats["email"]
    age = stats["age"]
    gender = cur.execute(f"""SELECT gender FROM gender WHERE id == {stats['gender']}""").fetchone()[0]
    goal = cur.execute(f"""SELECT goal FROM goal WHERE id == {stats['goal']}""").fetchone()[0]
    height = stats["height"]
    weight = stats["weight"]
    is_admin = "–î–∞" if stats["is_admin"] else "–ù–µ—Ç"

    con.close()

    return f"""
    -------------------------
üë§ –ò–º—è: {name} {surname}
üìß Email: {email}
üî¢ –í–æ–∑—Ä–∞—Å—Ç: {age} –ª–µ—Ç
üöª –ü–æ–ª: {gender}
üéØ –¶–µ–ª—å: {goal}
üìè –†–æ—Å—Ç: {height} —Å–º
‚öñÔ∏è –í–µ—Å: {weight} –∫–≥
‚öôÔ∏è –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: {is_admin}
-------------------------
"""


# –í—ã–≤–æ–¥ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å
async def make_stats(message, state):
    data = await state.get_data()
    email = data.get("user_email")
    con = sqlite3.connect("../db/calorie_tracker.db")
    cur = con.cursor()

    today_stat = cur.execute(f"""SELECT * FROM statistics 
    WHERE user == (SELECT id FROM user 
    WHERE email = '{email}') AND date = '{datetime.today().strftime('%Y-%m-%d')}'""").fetchone()
    if today_stat:
        calories = today_stat[3]
        proteins = today_stat[4]
        fats = today_stat[5]
        carbohydrates = today_stat[6]
    else:
        calories = 0
        proteins = 0
        fats = 0
        carbohydrates = 0
    text = f"""
-------------------------
–ö–∞–ª–æ—Ä–∏–∏: {round(calories, 1)} –≥
–ë–µ–ª–∫–∏: {round(proteins, 1)} –≥
–ñ–∏—Ä—ã: {round(fats, 1)} –≥
–£–≥–ª–µ–≤–æ–¥—ã: {round(carbohydrates, 1)} –≥
-------------------------"""

    plt.figure(figsize=(4, 4))
    plt.pie([calories, proteins, fats, carbohydrates],
            labels=["–ö–∞–ª–æ—Ä–∏–∏", "–ë–µ–ª–∫–∏", "–ñ–∏—Ä—ã", "–£–≥–ª–µ–≤–æ–¥—ã"],
            autopct='%1.1f%%', startangle=140)
    plt.axis('equal')
    plt.savefig("img.png")
    plt.close()

    kb = ReplyKeyboardMarkup(keyboard=make_keyboard("only_back"), resize_keyboard=True, one_time_keyboard=False)
    media = MediaGroupBuilder()
    media.add_photo(FSInputFile('img.png'))
    await message.reply_media_group(media=media.build())
    await message.reply(f"üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:{text}", reply_markup=kb)
    os.remove("img.png")
    con.close()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Ç–∞—Ç—É—Å–∞ logged
@dp.message(User.logged)
async def user_logged(message: types.Message, state: FSMContext):
    con = sqlite3.connect("../db/calorie_tracker.db")
    cur = con.cursor()
    data = await state.get_data()
    email = data.get("user_email")

    if message.text == "–ü—Ä–æ—Ñ–∏–ª—åüë§":
        await go_to_profile(state, message, email)
    elif message.text == "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞üìä":
        await state.set_state(User.statistics)
        await make_stats(message, state)
    elif message.text == "–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏—ë–º –ø–∏—â–∏üçî":
        await state.set_state(User.add_meal)
        kb = ReplyKeyboardMarkup(keyboard=make_keyboard("only_back"), resize_keyboard=True, one_time_keyboard=False)
        await message.reply("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ `<–Ω–∞–∑–≤–∞–Ω–∏–µ> <–≤–µ—Å(–≥)>`üçï:", reply_markup=kb)
    elif message.text == "–°—Ç–∞—Ç—å–∏üìÉ":
        await state.set_state(User.article)
        reply_kb = [[KeyboardButton(text="–ù–∞–∑–∞–¥üîô")]]
        for i in cur.execute("""SELECT * FROM article""").fetchall():
            reply_kb.append([KeyboardButton(text=i[1])])
        kb = ReplyKeyboardMarkup(keyboard=reply_kb, resize_keyboard=True, one_time_keyboard=False)
        await message.reply("–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –≤ —Ä–∞–∑–¥–µ–ª–µ —Å—Ç–∞—Ç–µ–π!\n"
                            "–í–æ–∑–º–æ–∂–Ω–æ –∑–¥–µ—Å—å –±—É–¥–µ—Ç —Ç–æ, —á—Ç–æ –≤–∞—Å –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Çüòâ", reply_markup=kb)
    elif message.text == "–í—ã–π—Ç–∏‚õî":
        await state.clear()
        await message.reply("üîì –í—ã –≤—ã—à–ª–∏ –∏–∑ —Å–≤–æ–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è.\n"
                            "–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –≤–æ–π–¥–∏—Ç–µ —Å–Ω–æ–≤–∞. –í–≤–µ–¥–∏—Ç–µ –ø–æ—á—Ç—Éüìß:",
                            reply_markup=ReplyKeyboardRemove())
        await state.set_state(User.user_email)
    con.close()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Ç–∞—Ç—É—Å–∞ profile
@dp.message(User.profile)
async def profile(message: types.Message, state: FSMContext):
    if message.text == "–ù–∞–∑–∞–¥üîô":
        await state.set_state(User.logged)
        kb = ReplyKeyboardMarkup(keyboard=make_keyboard("menu"), resize_keyboard=True, one_time_keyboard=False)
        await message.reply("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—éüè†", reply_markup=kb)
    elif message.text == "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å‚úçÔ∏è":
        await state.set_state(User.edit_profile)
        kb = ReplyKeyboardMarkup(keyboard=make_keyboard("edit_profile"), resize_keyboard=True, one_time_keyboard=False)
        await message.reply("‚öôÔ∏è –í—ã –ø–µ—Ä–µ—à–ª–∏ –≤ —Ä–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è.\n"
                            "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å.",
                            reply_markup=kb)
    else:
        await message.reply("–Ø –Ω–µ –∑–Ω–∞—é —Ç–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ãüòî.\n–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Ç–∞—Ç—É—Å–∞ statistics
@dp.message(User.statistics)
async def statistics(message: types.Message, state: FSMContext):
    if message.text == "–ù–∞–∑–∞–¥üîô":
        await state.set_state(User.logged)
        kb = ReplyKeyboardMarkup(keyboard=make_keyboard("menu"), resize_keyboard=True, one_time_keyboard=False)
        await message.reply("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—éüè†", reply_markup=kb)
    else:
        await message.reply("–Ø –Ω–µ –∑–Ω–∞—é —Ç–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ãüòî.\n–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Ç–∞—Ç—É—Å–∞ add_meal
@dp.message(User.add_meal)
async def add_meal(message: types.Message, state: FSMContext):
    data = await state.get_data()
    email = data.get("user_email")
    con = sqlite3.connect("../db/calorie_tracker.db")
    cur = con.cursor()

    if message.text == "–ù–∞–∑–∞–¥üîô":
        await state.set_state(User.logged)
        kb = ReplyKeyboardMarkup(keyboard=make_keyboard("menu"), resize_keyboard=True, one_time_keyboard=False)
        await message.reply("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—éüè†", reply_markup=kb)
    else:
        if len(message.text.split()) == 2 and message.text.split()[1].isdigit():
            if not cur.execute(f"""SELECT * FROM statistics 
            WHERE user = (SELECT id FROM user
            WHERE email = '{email}') AND date = '{datetime.today().strftime('%Y-%m-%d')}'""").fetchone():
                user = cur.execute(f"""SELECT id FROM user WHERE email = '{email}'""").fetchone()[0]
                cur.execute(f"""INSERT INTO statistics(id, user, date, calories, proteins, fats, carbohydrates) VALUES(42, {user}, '{datetime.today().strftime('%Y-%m-%d')}', 0, 0, 0, 0)""")
                con.commit()
            result = cur.execute(f"""SELECT * FROM product
            WHERE name = '{message.text.split()[0]}'""").fetchone()
            if result:
                weight = int(message.text.split()[1]) / 100
                cur.execute(f"""UPDATE statistics 
                SET calories = calories + {weight * result[2]},
                    proteins = proteins + {weight * result[3]},
                    fats = fats + {weight * result[4]},
                    carbohydrates = carbohydrates + {weight * result[5]}
                WHERE user = (SELECT id FROM user
                WHERE email = '{email}') AND date = '{datetime.today().strftime('%Y-%m-%d')}'""")
                con.commit()
                await message.reply("–ü—Ä–∏—ë–º –ø–∏—â–∏ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ωüéâ\n"
                                    "–ú–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ –∏–ª–∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥")
            else:
                await message.reply("–¢–∞–∫–æ–π –ø—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è "
                                    "\n–∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π –ø—Ä–æ–¥—É–∫—Ç –Ω–∞ —Å–∞–π—Ç–µüçé")
        else:
            await message.reply("–ù–ï–ö–û–†–†–ï–ö–¢–ù–´–ô –í–í–û–î –î–ê–ù–ù–´–•‚ùóÔ∏è")
    con.close()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Ç–∞—Ç—É—Å–∞ article
@dp.message(User.article)
async def article(message: types.Message, state: FSMContext):
    con = sqlite3.connect("../db/calorie_tracker.db")
    cur = con.cursor()

    if message.text == "–ù–∞–∑–∞–¥üîô":
        await state.set_state(User.logged)
        kb = ReplyKeyboardMarkup(keyboard=make_keyboard("menu"), resize_keyboard=True, one_time_keyboard=False)
        await message.reply("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—éüè†", reply_markup=kb)
    else:
        result = cur.execute(f"""SELECT * FROM article WHERE title == '{message.text}'""").fetchone()
        if result:
            await message.reply(f"{result[1]}\n\n{result[2]}")
        else:
            await message.reply("–ù–ï–ö–û–†–†–ï–ö–¢–ù–´–ô –í–í–û–î! –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—ÖüìÉ")
    con.close()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Ç–∞—Ç—É—Å–∞ edit_profile
@dp.message(User.edit_profile)
async def profile(message: types.Message, state: FSMContext):
    data = await state.get_data()
    email = data.get("user_email")

    con = sqlite3.connect("../db/calorie_tracker.db")
    cur = con.cursor()

    if message.text == "–ù–∞–∑–∞–¥üîô":
        await state.set_state(User.profile)
        kb = ReplyKeyboardMarkup(keyboard=make_keyboard("profile"), resize_keyboard=True, one_time_keyboard=False)
        await message.reply(check_profile(email), reply_markup=kb)
    elif message.text == "–¶–µ–ª—åüéØ":
        await state.set_state(User.edit_goal)
        kb = ReplyKeyboardMarkup(keyboard=make_keyboard("edit_goal"), resize_keyboard=True, one_time_keyboard=False)
        goal = cur.execute(f"""SELECT goal FROM goal 
        WHERE id == (SELECT goal FROM user 
        WHERE email == '{email}')""").fetchone()[0]
        await message.reply(f"üîÑ –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–ª–∏ –¥–∏–µ—Ç—ã. –í–∞—à–∞ —Ç–µ–∫—É—â–∞—è —Ü–µ–ª—å - {goal}. \n"
                            "–ö–∞–∫—É—é –Ω–æ–≤—É—é —Ü–µ–ª—å –≤—ã —Ö–æ—Ç–∏—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å?", reply_markup=kb)
    elif message.text == "–†–æ—Å—Çüìè":
        await state.set_state(User.edit_height)
        kb = ReplyKeyboardMarkup(keyboard=make_keyboard("only_back"), resize_keyboard=True, one_time_keyboard=False)
        await message.reply(f"–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π —Ä–æ—Å—Çüìè:", reply_markup=kb)
    elif message.text == "–í–µ—Å‚öñÔ∏è":
        await state.set_state(User.edit_weight)
        kb = ReplyKeyboardMarkup(keyboard=make_keyboard("only_back"), resize_keyboard=True, one_time_keyboard=False)
        await message.reply(f"–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –≤–µ—Å:‚öñÔ∏è", reply_markup=kb)
    elif message.text == "–í–æ–∑—Ä–∞—Å—Çüî¢":
        await state.set_state(User.edit_age)
        kb = ReplyKeyboardMarkup(keyboard=make_keyboard("only_back"), resize_keyboard=True, one_time_keyboard=False)
        await message.reply(f"–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –í–æ–∑—Ä–∞—Å—Çüî¢:", reply_markup=kb)
    elif message.text == "–û–±—Ä–∞–∑ –∂–∏–∑–Ω–∏üèÉ‚Äç‚ôÇÔ∏è":
        await state.set_state(User.edit_lifestyle)
        kb = ReplyKeyboardMarkup(keyboard=make_keyboard("edit_lifestyle"), resize_keyboard=True, one_time_keyboard=False)
        await message.reply(f"üö∂‚Äç‚ôÇÔ∏è –í—ã –≤—ã–±—Ä–∞–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –æ–±—Ä–∞–∑–∞ –∂–∏–∑–Ω–∏. "
                            f"–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–≥–æ –Ω—É–∂–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç", reply_markup=kb)
    else:
        await message.reply("–Ø –Ω–µ –∑–Ω–∞—é —Ç–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ãüòî.\n–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤")

    con.close()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Ç–∞—Ç—É—Å–∞ edit_goal
@dp.message(User.edit_goal)
async def edit_goal(message: types.Message, state: FSMContext):
    data = await state.get_data()
    email = data.get("user_email")
    con = sqlite3.connect("../db/calorie_tracker.db")
    cur = con.cursor()

    if message.text == "–ù–∞–∑–∞–¥üîô":
        await state.set_state(User.edit_profile)
        kb = ReplyKeyboardMarkup(keyboard=make_keyboard("edit_profile"), resize_keyboard=True, one_time_keyboard=False)
        await message.reply("‚öôÔ∏è –í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ —Ä–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è.\n"
                            "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å.", reply_markup=kb)
    elif message.text == "–°–±—Ä–æ—Å–∏—Ç—å –≤–µ—Å":
        cur.execute(f"""UPDATE user SET goal = 1 WHERE email == '{email}'""")
        con.commit()
        await go_to_profile(state, message, email)
    elif message.text == "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –≤–µ—Å":
        cur.execute(f"""UPDATE user SET goal = 2 WHERE email == '{email}'""")
        con.commit()
        await go_to_profile(state, message, email)
    elif message.text == "–ù–∞–±—Ä–∞—Ç—å –≤–µ—Å":
        cur.execute(f"""UPDATE user SET goal = 3 WHERE email == '{email}'""")
        con.commit()
        await go_to_profile(state, message, email)
    else:
        await message.reply("–Ø –Ω–µ –∑–Ω–∞—é —Ç–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ãüòî.\n–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤")
    con.close()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Ç–∞—Ç—É—Å–∞ edit_height
@dp.message(User.edit_height)
async def edit_height(message: types.Message, state: FSMContext):
    data = await state.get_data()
    email = data.get("user_email")
    con = sqlite3.connect("../db/calorie_tracker.db")
    cur = con.cursor()

    if message.text == "–ù–∞–∑–∞–¥üîô":
        await state.set_state(User.edit_profile)
        kb = ReplyKeyboardMarkup(keyboard=make_keyboard("edit_profile"), resize_keyboard=True, one_time_keyboard=False)
        await message.reply("‚öôÔ∏è –í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ —Ä–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è.\n"
                            "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å.", reply_markup=kb)
    elif message.text.isdigit() and  50 <= int(message.text)<= 300:
        cur.execute(f"""UPDATE user SET height = {int(message.text)} WHERE email == '{email}'""")
        con.commit()
        await go_to_profile(state, message, email)
    else:
        await message.reply("–ó–Ω–∞—á–µ–Ω–∏–µ —Ä–æ—Å—Ç–∞ –¥–æ–ª–∂–Ω–æ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –æ—Ç 50 –¥–æ 300‚ùóÔ∏è")
    con.close()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Ç–∞—Ç—É—Å–∞ edit_weight
@dp.message(User.edit_weight)
async def edit_weight(message: types.Message, state: FSMContext):
    data = await state.get_data()
    email = data.get("user_email")
    con = sqlite3.connect("../db/calorie_tracker.db")
    cur = con.cursor()

    if message.text == "–ù–∞–∑–∞–¥üîô":
        await state.set_state(User.edit_profile)
        kb = ReplyKeyboardMarkup(keyboard=make_keyboard("edit_profile"), resize_keyboard=True, one_time_keyboard=False)
        await message.reply("‚öôÔ∏è –í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ —Ä–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è.\n"
                            "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å.", reply_markup=kb)
    elif message.text.isdigit() and 10 <= int(message.text) <= 600:
        cur.execute(f"""UPDATE user SET weight = {int(message.text)} WHERE email == '{email}'""")
        con.commit()
        await go_to_profile(state, message, email)
    else:
        await message.reply("–ó–Ω–∞—á–µ–Ω–∏–µ –≤–µ—Å–∞ –¥–æ–ª–∂–Ω–æ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –æ—Ç 10 –¥–æ 600‚ùóÔ∏è")
    con.close()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Ç–∞—Ç—É—Å–∞ edit_age
@dp.message(User.edit_age)
async def edit_age(message: types.Message, state: FSMContext):
    data = await state.get_data()
    email = data.get("user_email")
    con = sqlite3.connect("../db/calorie_tracker.db")
    cur = con.cursor()

    if message.text == "–ù–∞–∑–∞–¥üîô":
        await state.set_state(User.edit_profile)
        kb = ReplyKeyboardMarkup(keyboard=make_keyboard("edit_profile"), resize_keyboard=True, one_time_keyboard=False)
        await message.reply("‚öôÔ∏è –í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ —Ä–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è.\n"
                            "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å.", reply_markup=kb)
    elif message.text.isdigit() and 5 <= int(message.text) <= 200:
        cur.execute(f"""UPDATE user SET age = {int(message.text)} WHERE email == '{email}'""")
        con.commit()
        await go_to_profile(state, message, email)
    else:
        await message.reply("–í–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 5 –¥–æ 200 –ª–µ—Ç‚ùó Ô∏è")
    con.close()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Ç–∞—Ç—É—Å–∞ edit_lifestyle
@dp.message(User.edit_lifestyle)
async def edit_lifestyle(message: types.Message, state: FSMContext):
    data = await state.get_data()
    email = data.get("user_email")
    con = sqlite3.connect("../db/calorie_tracker.db")
    cur = con.cursor()

    if message.text == "–ù–∞–∑–∞–¥üîô":
        await state.set_state(User.edit_profile)
        kb = ReplyKeyboardMarkup(keyboard=make_keyboard("edit_profile"), resize_keyboard=True, one_time_keyboard=False)
        await message.reply("‚öôÔ∏è –í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ —Ä–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è.\n"
                            "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å.", reply_markup=kb)
    elif message.text == "–°–∏–¥—è—á–∏–π –æ–±—Ä–∞–∑ –∂–∏–∑–Ω–∏":
        cur.execute(f"""UPDATE user SET lifestyle = 1 WHERE email == '{email}'""")
        con.commit()
        await go_to_profile(state, message, email)
    elif message.text == "–ù–∏–∑–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å":
        cur.execute(f"""UPDATE user SET lifestyle = 2 WHERE email == '{email}'""")
        con.commit()
        await go_to_profile(state, message, email)
    elif message.text == "–£–º–µ—Ä–µ–Ω–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å":
        cur.execute(f"""UPDATE user SET lifestyle = 3 WHERE email == '{email}'""")
        con.commit()
        await go_to_profile(state, message, email)
    elif message.text == "–í—ã—Å–æ–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å":
        cur.execute(f"""UPDATE user SET lifestyle = 4 WHERE email == '{email}'""")
        con.commit()
        await go_to_profile(state, message, email)
    elif message.text == "–û—á–µ–Ω—å –≤—ã—Å–æ–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å":
        cur.execute(f"""UPDATE user SET lifestyle = 5 WHERE email == '{email}'""")
        con.commit()
        await go_to_profile(state, message, email)
    else:
        await message.reply("–Ø –Ω–µ –∑–Ω–∞—é —Ç–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ãüòî.\n–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤")
    con.close()


if __name__ == '__main__':
    asyncio.run(main())


